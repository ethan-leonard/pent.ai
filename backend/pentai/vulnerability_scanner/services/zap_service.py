from zapv2 import ZAPv2
import time
import logging
from django.utils import timezone
from api.models import Scan, Vulnerability

logger = logging.getLogger(__name__)

class ZAPScanService:
    """Service to interact with OWASP ZAP for scanning websites"""
    
    def __init__(self, zap_proxy="http://127.0.0.1:8080"):
        """Initialize ZAP API client with the proxy address"""
        self.zap = ZAPv2(proxies={'http': zap_proxy, 'https': zap_proxy})
    
    def scan_url(self, scan_obj):
        """
        Perform a full scan on the target URL
        
        Args:
            scan_obj: A Scan model instance with the target URL
            
        Returns:
            bool: True if scan successful, False otherwise
        """
        target_url = scan_obj.target_url
        logger.info(f"Starting ZAP scan of {target_url}")
        
        try:
            # Update scan status to in_progress
            scan_obj.status = 'in_progress'
            scan_obj.save()
            
            # Access the target URL
            self.zap.urlopen(target_url)
            logger.info(f"Accessed target: {target_url}")
            
            # Start spider scan
            logger.info("Starting spider scan")
            spider_scan_id = self.zap.spider.scan(target_url)
            
            # Wait for spider scan to complete
            while int(self.zap.spider.status(spider_scan_id)) < 100:
                logger.info(f"Spider progress: {self.zap.spider.status(spider_scan_id)}%")
                time.sleep(2)
            logger.info("Spider scan completed")
            
            # Start active scan
            logger.info("Starting active scan")
            scan_id = self.zap.ascan.scan(target_url)
            
            # Wait for active scan to complete
            while int(self.zap.ascan.status(scan_id)) < 100:
                logger.info(f"Active scan progress: {self.zap.ascan.status(scan_id)}%")
                time.sleep(5)
            logger.info("Active scan completed")
            
            # Get and process alerts
            self._process_alerts(scan_obj)
            
            # Update scan status to completed
            scan_obj.status = 'completed'
            scan_obj.end_time = timezone.now()
            scan_obj.save()
            
            return True
            
        except Exception as e:
            logger.error(f"Error during scan: {str(e)}")
            scan_obj.status = 'failed'
            scan_obj.end_time = timezone.now()
            scan_obj.save()
            return False
    
    def _process_alerts(self, scan_obj):
        """
        Process alerts from ZAP and save to database
        
        Args:
            scan_obj: A Scan model instance
        """
        # Get all alerts
        alerts = self.zap.core.alerts(baseurl=scan_obj.target_url)
        logger.info(f"Found {len(alerts)} alerts")
        
        # Process each alert and save to the database
        for alert in alerts:
            # Extract relevant information
            name = alert.get('name', 'Unknown Vulnerability')
            description = alert.get('description', '')
            url = alert.get('url', scan_obj.target_url)
            risk = alert.get('risk', 'info').lower()
            confidence = alert.get('confidence', 'low').lower()
            
            # Create vulnerability record
            Vulnerability.objects.create(
                scan=scan_obj,
                name=name,
                description=description,
                url=url,
                risk=risk,
                confidence=confidence
            )
            
        return len(alerts)