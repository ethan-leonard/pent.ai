import logging
import time
from zapv2 import ZAPv2

logger = logging.getLogger(__name__)

class ZAPService:
    """Service for verifying connection to OWASP ZAP"""
    
    def __init__(self):
        """Initialize the ZAP service with connection to ZAP API"""
        # No API key (disabled in our configuration)
        self.apiKey = None
        
        # Instead of referencing "zap", use "localhost" since your startup.sh maps ZAP to port 8090 on localhost
        self.zap = ZAPv2(
            apikey=self.apiKey, 
            proxies={'http': 'http://localhost:8090', 'https': 'http://localhost:8090'}
        )
        
    def verify_connection(self, url):
        """
        Verify that we can connect to ZAP and access a URL
        
        Args:
            url: The URL to check
            
        Returns:
            dict: Connection status information
        """
        try:
            # First check if ZAP API is available by getting the version
            logger.info("Attempting to connect to ZAP API")
            version = self.zap.core.version
            logger.info(f"Successfully connected to ZAP version: {version}")
            
            # Now try to spider the URL using ZAP
            logger.info(f"Attempting to spider URL through ZAP: {url}")
            try:
                # Start a spider scan against the target URL
                scan_id = self.zap.spider.scan(url)
                logger.info(f"Started spider with ID: {scan_id}")
                
                # Wait for the spider to complete (with a max timeout)
                timeout = 30
                start_time = time.time()
                while int(self.zap.spider.status(scan_id)) < 100:
                    if time.time() - start_time > timeout:
                        logger.warning("Spider timed out, but ZAP connection is confirmed")
                        break
                    logger.info(f"Spider progress: {self.zap.spider.status(scan_id)}%")
                    time.sleep(1)
                
                # Get the spider results to verify URL access
                results = self.zap.spider.results(scan_id)
                return {
                    "zap_connected": True,
                    "zap_version": version,
                    "url_accessible": True,
                    "urls_found": len(results) if results else 0,
                    "success": True,
                    "message": f"Successfully connected to ZAP (version {version}) and accessed {url}"
                }
                
            except Exception as url_error:
                logger.error(f"Error accessing URL {url}: {str(url_error)}")
                return {
                    "zap_connected": True,
                    "zap_version": version,
                    "url_accessible": False,
                    "success": False,
                    "error": str(url_error),
                    "message": f"Connected to ZAP (version {version}) but failed to access URL: {str(url_error)}"
                }
                
        except Exception as e:
            logger.error(f"Error connecting to ZAP: {str(e)}")
            return {
                "zap_connected": False,
                "success": False,
                "error": str(e),
                "message": f"Failed to connect to ZAP: {str(e)}"
            }