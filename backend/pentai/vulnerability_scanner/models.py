from django.db import models

class Vulnerability(models.Model):
    RISK_CHOICES = (
        ('High', 'High'),
        ('Medium', 'Medium'),
        ('Low', 'Low'),
        ('Informational', 'Informational'),
    )
    
    # Basic user-facing information
    name = models.CharField(max_length=255)
    description = models.TextField()
    url = models.URLField()
    risk = models.CharField(max_length=50, choices=RISK_CHOICES)
    confidence = models.CharField(max_length=50)
    param = models.CharField(max_length=100, null=True, blank=True)  # Parameter name that's vulnerable
    attack = models.TextField(null=True, blank=True)  # What input triggered the vulnerability
    solution = models.TextField(null=True, blank=True)  # Mitigation recommendations
    
    # Internal data for AI simulator
    method = models.CharField(max_length=10, null=True, blank=True)  # HTTP method (GET, POST, etc)
    evidence = models.TextField(null=True, blank=True)  # Error message or other evidence
    plugin_id = models.CharField(max_length=20, null=True, blank=True)  # ZAP plugin ID
    cweid = models.CharField(max_length=20, null=True, blank=True)  # Common Weakness Enumeration ID
    reference = models.TextField(null=True, blank=True)  # Reference URLs for more information
    input_vector = models.CharField(max_length=50, null=True, blank=True)  # Where the attack was injected
    alert_id = models.CharField(max_length=50, null=True, blank=True)  # Original alert ID

    class Meta:
        verbose_name_plural = "Vulnerabilities"
        ordering = ['-risk', 'name']
    
    def __str__(self):
        return f"{self.name} ({self.risk})"